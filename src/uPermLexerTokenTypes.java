// $ANTLR 2.7.7 (20080604): "uperm.g" -> "uPermParser.java"$

public interface uPermLexerTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int LETTER = 4;
	int DIGIT = 5;
	int WS = 6;
	int PLUS = 7;
	int MINUS = 8;
	int MULT = 9;
	int DIVD = 10;
	int MOD = 11;
	int MINVR = 12;
	int AND = 13;
	int OR = 14;
	int EQ = 15;
	int NE = 16;
	int LT = 17;
	int GT = 18;
	int LE = 19;
	int GE = 20;
	int BACKSL = 21;
	int LPAREN = 22;
	int RPAREN = 23;
	int LBRACK = 24;
	int RBRACK = 25;
	int LBRACE = 26;
	int RBRACE = 27;
	int SEMI = 28;
	int COMMA = 29;
	int COLON = 30;
	int ASSIGN = 31;
	int INTEGER = 32;
	int ID = 33;
	int STRING = 34;
	int COMMENT = 35;
	int STATEMENT = 36;
	int STATEMENTS = 37;
	int BLOCK = 38;
	int ADD_INVS = 39;
	int MULT_INVS = 40;
	int FUNC_CALL = 41;
	int EXPR_LIST = 42;
	int PERM_CYCLE = 43;
	int PERM_IMAGE = 44;
	int PERM_ID = 45;
	int LIST = 46;
	int SLICE = 47;
	int DUMMY = 48;
	int DEBUG = 49;
	int LITERAL_symtab = 50;
	int LITERAL_control = 51;
	int LITERAL_return = 52;
	int LITERAL_break = 53;
	int LITERAL_continue = 54;
	int LITERAL_local = 55;
	int LITERAL_print = 56;
	int LITERAL_if = 57;
	int LITERAL_else = 58;
	int LITERAL_while = 59;
	int LITERAL_for = 60;
	int LITERAL_fun = 61;
	int LITERAL_import = 62;
	int LITERAL_sizeof = 63;
	int LITERAL_true = 64;
	int LITERAL_false = 65;
	int LITERAL_dumpst = 66;
}
